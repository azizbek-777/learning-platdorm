services:
  nginx:
    build: ./.docker/images/nginx
    ports:
      - "80:80"
    depends_on:
      - dev
    networks:
      - app_network

  dev:
    container_name: dev
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - 3000:3000
      - 9229:9229
    env_file:
      - .env
    networks:
      - app_network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - mysql
      - redis

  # prod:
  #   container_name: nestjs_api_prod
  #   image: nestjs-api-prod:1.0.0
  #   build:
  #     context: .
  #     target: production
  #     dockerfile: ./Dockerfile
  #   command: npm run start:prod
  #   ports:
  #     - 3000:3000
  #     - 9229:9229
  #   networks:
  #     - nesjs-network
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   restart: unless-stopped

  mysql:
    image: mysql:latest
    container_name: learnapp_mysql
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: learnapp_pma
    links:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 100000000
    restart: always
    ports:
      - "8081:80"
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: app_redis
    command: [ "sh", "-c", "redis-server --requirepass $${REDIS_PASSWORD}" ]
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - app_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
